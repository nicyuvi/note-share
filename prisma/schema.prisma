generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  name      String   @unique
  bio       String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notes   Note[]
  servers Server[]
  members Member[]

  @@unique([id, name], name: "profile_identifier")
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  // published Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId   Int
  authorName String
  author     Profile @relation(fields: [authorId, authorName], references: [id, name], onUpdate: Cascade, onDelete: Cascade)

  // set default to null instead of not required
  serverId Int?
  Server   Server? @relation(fields: [serverId], references: [id], onUpdate: NoAction, onDelete: SetNull)
}

model Server {
  id         Int      @id @default(autoincrement())
  inviteCode String   @unique @default(uuid())
  name       String
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  profileId Int
  profile   Profile  @relation(fields: [profileId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  notes     Note[]
  members   Member[]
}

enum MemberRole {
  ADMIN
  GUEST
}

model Member {
  id   Int        @id @default(autoincrement())
  role MemberRole @default(GUEST)

  serverId Int?
  Server   Server? @relation(fields: [serverId], references: [id], onUpdate: NoAction, onDelete: Cascade)

  profileId Int?
  Profile   Profile? @relation(fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
